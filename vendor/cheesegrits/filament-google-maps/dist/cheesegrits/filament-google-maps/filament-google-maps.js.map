{"version":3,"file":"/cheesegrits/filament-google-maps/filament-google-maps.js","mappings":"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","sources":["webpack://filament-google-maps/webpack/runtime/chunk loaded","webpack://filament-google-maps/./resources/js/filament-google-maps.js","webpack://filament-google-maps/webpack/bootstrap","webpack://filament-google-maps/webpack/runtime/hasOwnProperty shorthand","webpack://filament-google-maps/webpack/runtime/jsonp chunk loading","webpack://filament-google-maps/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","window.filamentGoogleMaps = ($wire, config) => {\n    return {\n        map: null,\n        geocoder: null,\n        marker: null,\n        markerLocation: null,\n        layers: null,\n        mapEl: null,\n        pacEl: null,\n        config: {\n            debug: false,\n            autocomplete: '',\n            autocompleteReverse: false,\n            geolocate: true,\n            geolocateLabel: 'Set Current Location',\n            draggable: true,\n            clickable: false,\n            defaultLocation: {\n                lat: 0,\n                lng: 0\n            },\n            statePath: '',\n            controls: {\n                mapTypeControl: true,\n                scaleControl: true,\n                streetViewControl: true,\n                rotateControl: true,\n                fullscreenControl: true,\n                searchBoxControl: false,\n                zoomControl: false,\n            },\n            drawingModeL: null,\n            drawingControl: false,\n            drawingControlPosition: 6,\n            drawingModes: {\n                marker: true,\n                circle: true,\n                rectangle: true,\n                polygon: true,\n                polyline: true,\n            },\n            drawingField: null,\n            layers: [],\n            geoJson: null,\n            geoJsonField: null,\n            geoJsonProperty: null,\n            geoJsonVisible: true,\n            reverseGeocodeFields: {},\n            defaultZoom: 8,\n            gmaps: '',\n        },\n        symbols: {\n            '%n': [\"street_number\"],\n            '%z': [\"postal_code\"],\n            '%S': [\"street_address\", \"route\"],\n            '%A1': [\"administrative_area_level_1\"],\n            '%A2': [\"administrative_area_level_2\"],\n            '%A3': [\"administrative_area_level_3\"],\n            '%A4': [\"administrative_area_level_4\"],\n            '%A5': [\"administrative_area_level_5\"],\n            '%a1': [\"administrative_area_level_1\"],\n            '%a2': [\"administrative_area_level_2\"],\n            '%a3': [\"administrative_area_level_3\"],\n            '%a4': [\"administrative_area_level_4\"],\n            '%a5': [\"administrative_area_level_5\"],\n            '%L': [\"locality\"],\n            '%D': [\"sublocality\"],\n            '%C': [\"country\"],\n            '%c': [\"country\"],\n        },\n        drawingManager: null,\n        overlays: [],\n        dataLayer: null,\n        geoJsonDataLayer: null,\n        polyOptions: {\n            // strokeColor: '#f06eaa',\n            strokeColor: '#00ff00',\n            strokeOpacity: '0.5',\n            strokeWeight: 3,\n            fillOpacity: 0.45,\n            draggable: true,\n            editable: false,\n            clickable: true,\n            // zIndex: 1,\n        },\n        selectedShape: null,\n\n        loadGMaps: function () {\n            if (!document.getElementById('filament-google-maps-google-maps-js')) {\n                const script = document.createElement('script');\n                script.id = 'filament-google-maps-google-maps-js';\n                window.filamentGoogleMapsAsyncLoad = this.createMap.bind(this);\n                script.src = this.config.gmaps + '&callback=filamentGoogleMapsAsyncLoad';\n                document.head.appendChild(script);\n            } else {\n                const waitForGlobal = function (key, callback) {\n                    if (window[key]) {\n                        callback();\n                    } else {\n                        setTimeout(function () {\n                            waitForGlobal(key, callback);\n                        }, 100);\n                    }\n                };\n\n                waitForGlobal(\"filamentGoogleMapsAPILoaded\", function () {\n                    this.createMap();\n                }.bind(this));\n            }\n        },\n\n        init: function (mapEl, pacEl) {\n            this.mapEl = mapEl;\n            this.pacEl = pacEl;\n            this.config = {...this.config, ...config};\n            this.loadGMaps();\n        },\n\n        createMap: function () {\n            window.filamentGoogleMapsAPILoaded = true;\n\n            if (this.config.autocompleteReverse || Object.keys(this.config.reverseGeocodeFields).length > 0) {\n                this.geocoder = new google.maps.Geocoder();\n            }\n\n            this.map = new google.maps.Map(this.mapEl, {\n                center: this.getCoordinates(),\n                zoom: this.config.defaultZoom,\n                ...this.config.controls\n            });\n\n\n            this.marker = new google.maps.Marker({\n                draggable: this.config.draggable,\n                map: this.map\n            });\n\n            this.marker.setPosition(this.getCoordinates());\n\n            if (this.config.clickable) {\n                this.map.addListener('click', (event) => {\n                    this.markerMoved(event)\n                });\n            }\n\n            if (this.config.draggable) {\n                google.maps.event.addListener(this.marker, 'dragend', (event) => {\n                    this.markerMoved(event)\n                });\n            }\n\n            if (this.config.controls.searchBoxControl) {\n                const input = this.pacEl;\n                const searchBox = new google.maps.places.SearchBox(input);\n                this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n                searchBox.addListener(\"places_changed\", () => {\n                    input.value = ''\n                    this.markerLocation = searchBox.getPlaces()[0].geometry.location\n                })\n            }\n\n            const geocompleteOptions = {\n                fields: [\"formatted_address\", \"geometry\", \"name\"],\n                strictBounds: false,\n                types: [\"geocode\"],\n            };\n\n\n            if (this.config.autocomplete) {\n                const geoComplete = document.getElementById(this.config.autocomplete);\n\n                if (geoComplete) {\n                    window.addEventListener('keydown', function (e) {\n                        if (e.key === 'U+000A' || e.key === 'Enter' || e.code === 'Enter') {\n                            if (e.target.nodeName === 'INPUT' && e.target.type === 'text') {\n                                e.preventDefault();\n                                return false;\n                            }\n                        }\n                    }, true);\n\n                    const autocomplete = new google.maps.places.Autocomplete(geoComplete, geocompleteOptions);\n\n                    autocomplete.addListener(\"place_changed\", () => {\n                        const place = autocomplete.getPlace();\n\n                        if (!place.geometry || !place.geometry.location) {\n                            window.alert(\"No details available for input: '\" + place.name + \"'\");\n                            return;\n                        }\n\n                        if (place.geometry.viewport) {\n                            this.map.fitBounds(place.geometry.viewport);\n                        } else {\n                            this.map.setCenter(place.geometry.location);\n                        }\n\n                        $wire.set(this.config.autocomplete, place.formatted_address);\n                        this.marker.setPosition(place.geometry.location);\n                        this.markerLocation = place.geometry.location;\n                        this.setCoordinates(place.geometry.location);\n                        this.updateGeocode(this.markerLocation);\n                    });\n                }\n            }\n\n            if (this.config.layers) {\n                this.layers = this.config.layers.map((layerUrl) => {\n                    const kmlLayer = new google.maps.KmlLayer({\n                        url: layerUrl,\n                        map: this.map,\n                    });\n\n                    kmlLayer.addListener(\"click\", (kmlEvent) => {\n                        const text = kmlEvent.featureData.description;\n                    });\n                })\n            }\n\n            if (this.config.geoJson) {\n                if (this.config.geoJsonVisible) {\n                    this.geoJsonDataLayer = this.map.data;\n                } else {\n                    this.geoJsonDataLayer = new google.maps.Data();\n                }\n                \n                if (/^http/.test(this.config.geoJson)) {\n                    this.geoJsonDataLayer.loadGeoJson(this.config.geoJson);\n                } else {\n                    this.geoJsonDataLayer.addGeoJson(JSON.parse(this.config.geoJson));\n                }\n            }\n\n            if (this.config.geolocate && \"geolocation\" in navigator) {\n                const locationButton = document.createElement(\"button\");\n\n                locationButton.textContent = this.config.geolocateLabel;\n                locationButton.classList.add(\"custom-map-control-button\");\n                this.map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);\n\n                locationButton.addEventListener(\"click\", (e) => {\n                    e.preventDefault()\n                    navigator.geolocation.getCurrentPosition((position) => {\n                        this.markerLocation = {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        };\n                        this.setCoordinates(this.markerLocation);\n                        this.updateAutocomplete(this.markerLocation);\n                        this.updateGeocode(this.markerLocation);\n                        this.map.panTo(this.markerLocation);\n                    });\n                });\n            }\n\n            if (this.config.drawingControl) {\n                this.map.data.setStyle({\n                    clickable: false,\n                    cursor: null,\n                    draggable: false,\n                    editable: false,\n                    fillOpacity: 0.0,\n                    visible: false,\n                    // zIndex: 0\n                });\n\n                this.drawingManager = new google.maps.drawing.DrawingManager({\n                    drawingMode: null,\n                    drawingControl: true,\n                    drawingControlOptions: {\n                        position: this.config.drawingControlPosition,\n                        drawingModes: [\n                            ...(this.config.drawingModes.marker ? [google.maps.drawing.OverlayType.MARKER] : []),\n                            ...(this.config.drawingModes.circle ? [google.maps.drawing.OverlayType.CIRCLE] : []),\n                            ...(this.config.drawingModes.polygon ? [google.maps.drawing.OverlayType.POLYGON] : []),\n                            ...(this.config.drawingModes.polyline ? [google.maps.drawing.OverlayType.POLYLINE] : []),\n                            ...(this.config.drawingModes.rectangle ? [google.maps.drawing.OverlayType.RECTANGLE] : []),\n                        ],\n                    },\n                    markerOptions: {\n                        draggable: true\n                    },\n                    polylineOptions: {\n                        draggable: true,\n                        editable: false\n                    },\n                    rectangleOptions: this.polyOptions,\n                    circleOptions: this.polyOptions,\n                    polygonOptions: this.polyOptions,\n                });\n\n                this.drawingManager.setMap(this.map);\n                google.maps.event.addListener(this.drawingManager, 'drawingmode_changed', () => {\n                    this.clearSelection()\n                });\n                // google.maps.event.addListener(this.map, 'click', () => {\n                //     this.clearSelection()\n                // });\n\n                if (this.config.drawingField) {\n                    this.dataLayer = new google.maps.Data();\n\n                    let geoJSON = $wire.get(this.config.drawingField);\n                    geoJSON && this.loadFeaturesCollection(JSON.parse(geoJSON));\n\n                    google.maps.event.addListener(this.drawingManager, 'overlaycomplete', (event) => {\n                        event.overlay.type = event.type;\n                        event.overlay.id = this.guid();\n                        event.overlay.feature = this.instanceFeature(event.overlay);\n                        this.addOverlayEvents(event.overlay);\n                        this.overlays.push(event.overlay);\n\n                        if (event.type != google.maps.drawing.OverlayType.MARKER) {\n                            // Switch back to non-drawing mode after drawing a shape.\n                            this.drawingManager.setDrawingMode(null);\n                            this.setSelection(event.overlay);\n                        }\n\n                        this.drawingModified();\n                    });\n                }\n            }\n        },\n        markerMoved: function (event) {\n            this.geoJsonContains(event.latLng);\n            this.markerLocation = event.latLng.toJSON();\n            this.setCoordinates(this.markerLocation);\n            this.updateAutocomplete(this.markerLocation);\n            this.updateGeocode(this.markerLocation);\n            // this.updateMap(this.markerLocation);\n            this.map.panTo(this.markerLocation);\n        },\n        updateMapFromAlpine: function () {\n            const location = this.getCoordinates();\n            const markerLocation = this.marker.getPosition();\n\n            if (!(location.lat === markerLocation.lat() && location.lng === markerLocation.lng())) {\n                this.updateAutocomplete(location)\n                this.updateMap(location);\n            }\n        },\n        updateMap: function (position) {\n            this.marker.setPosition(position);\n            this.map.panTo(position);\n        },\n        updateGeocode: function (position) {\n            if (Object.keys(this.config.reverseGeocodeFields).length > 0) {\n                this.geocoder\n                    .geocode({location: position})\n                    .then((response) => {\n                        if (response.results[0]) {\n                            //$wire.set(config.autocomplete, response.results[0].formatted_address);\n                            const replacements = this.getReplacements(response.results[0].address_components);\n\n                            for (const field in this.config.reverseGeocodeFields) {\n                                let replaced = this.config.reverseGeocodeFields[field];\n\n                                for (const replacement in replacements) {\n                                    replaced = replaced.split(replacement).join(replacements[replacement]);\n                                }\n\n                                for (const symbol in this.symbols) {\n                                    replaced = replaced.split(symbol).join('');\n                                }\n\n                                replaced = replaced.trim();\n                                $wire.set(field, replaced)\n                            }\n\n                        }\n                    })\n                    .catch((error) => {\n                        console.log(error.message);\n                    })\n            }\n        },\n        updateAutocomplete: function (position) {\n            if (this.config.autocomplete && this.config.autocompleteReverse) {\n                this.geocoder\n                    .geocode({location: position})\n                    .then((response) => {\n                        if (response.results[0]) {\n                            $wire.set(this.config.autocomplete, response.results[0].formatted_address);\n                        }\n                    })\n                    .catch((error) => {\n                        console.log(error.message);\n                    })\n            }\n        },\n        setCoordinates: function (position) {\n            $wire.set(this.config.statePath, position);\n        },\n        getCoordinates: function () {\n            let location = $wire.get(this.config.statePath)\n            if (location === null || !location.hasOwnProperty('lat')) {\n                location = {lat: this.config.defaultLocation.lat, lng: this.config.defaultLocation.lng}\n            }\n            return location;\n        },\n\n        getReplacements: function (address_components) {\n            let replacements = {};\n\n            address_components.forEach(component => {\n                for (const symbol in this.symbols) {\n                    if (this.symbols[symbol].indexOf(component.types[0]) !== -1) {\n                        if (symbol === symbol.toLowerCase()) {\n                            replacements[symbol] = component.short_name;\n                        } else {\n                            replacements[symbol] = component.long_name;\n                        }\n                    }\n                }\n            });\n\n            if (this.config.debug) {\n                console.log(replacements);\n            }\n\n            return replacements;\n        },\n\n        instanceOverlay: function (feature) {\n            var instance = null;\n            switch (feature.properties.type) {\n                case google.maps.drawing.OverlayType.MARKER:\n                    instance = new google.maps.Marker({\n                        id: feature.properties.id,\n                        type: feature.properties.type,\n                        position: new google.maps.LatLng(feature.geometry.coordinates[1], feature.geometry.coordinates[0]),\n                        draggable: true\n                    });\n                    break;\n                case google.maps.drawing.OverlayType.RECTANGLE:\n                    var NE = new google.maps.LatLng(feature.geometry.coordinates[0][2][1], feature.geometry.coordinates[0][2][0]);\n                    var SW = new google.maps.LatLng(feature.geometry.coordinates[0][0][1], feature.geometry.coordinates[0][0][0]);\n                    instance = new google.maps.Rectangle(Object.assign({}, this.polyOptions, {\n                        id: feature.properties.id,\n                        type: feature.properties.type,\n                        // fillColor: feature.properties.color,\n                        bounds: new google.maps.LatLngBounds(SW, NE),\n                        editable: false\n                    }));\n                    break;\n                case google.maps.drawing.OverlayType.POLYGON:\n                    instance = new google.maps.Polygon(Object.assign({}, this.polyOptions, {\n                        id: feature.properties.id,\n                        type: feature.properties.type,\n                        // fillColor: feature.properties.color,\n                        paths: this.transformToMVCArray(feature.geometry.coordinates),\n                        editable: false\n                    }));\n                    break;\n                case google.maps.drawing.OverlayType.POLYLINE:\n                    instance = new google.maps.Polyline({\n                        id: feature.properties.id,\n                        type: feature.properties.type,\n                        // strokeColor: feature.properties.color,\n                        path: this.transformToMVCArray([feature.geometry.coordinates]).getAt(0),\n                        draggable: true,\n                        editable: false\n                    });\n                    break;\n                case google.maps.drawing.OverlayType.CIRCLE:\n                    instance = new google.maps.Circle(Object.assign({}, this.polyOptions, {\n                        id: feature.properties.id,\n                        type: feature.properties.type,\n                        // fillColor: feature.properties.color,\n                        center: new google.maps.LatLng(feature.geometry.coordinates[1], feature.geometry.coordinates[0]),\n                        radius: feature.properties.radius,\n                        editable: false\n                    }));\n                    break;\n            }\n            // instance.zIndex = this.overlays.length + 1;\n            return instance;\n        },\n\n        instanceFeature: function (overlay) {\n            var calculatedOverlay = this.calculateGeometry(overlay);\n            return this.dataLayer.add(new google.maps.Data.Feature({\n                geometry: calculatedOverlay.geometry,\n                properties: Object.assign({\n                    id: this.guid(),\n                    type: overlay.type\n                }, calculatedOverlay.hasOwnProperty('properties') ? calculatedOverlay.properties : {})\n            }));\n        },\n\n        calculateGeometry: function (overlay, geometryOnly) {\n            switch (overlay.type) {\n                case google.maps.drawing.OverlayType.MARKER:\n                    return geometryOnly ? new google.maps.Data.Point(overlay.getPosition()) : {\n                        geometry: new google.maps.Data.Point(overlay.getPosition())\n                    };\n                case google.maps.drawing.OverlayType.RECTANGLE:\n                    let b = overlay.getBounds(),\n                        p = [b.getSouthWest(), {\n                            lat: b.getSouthWest().lat(),\n                            lng: b.getNorthEast().lng()\n                        }, b.getNorthEast(), {\n                            lng: b.getSouthWest().lng(),\n                            lat: b.getNorthEast().lat()\n                        }];\n                    return geometryOnly ? new google.maps.Data.Polygon([p]) : {\n                        geometry: new google.maps.Data.Polygon([p])\n                    };\n                case google.maps.drawing.OverlayType.POLYGON:\n                    return geometryOnly ? new google.maps.Data.Polygon([overlay.getPath().getArray()]) : {\n                        geometry: new google.maps.Data.Polygon([overlay.getPath().getArray()])\n                    };\n                case google.maps.drawing.OverlayType.POLYLINE:\n                    return geometryOnly ? new google.maps.Data.LineString(overlay.getPath().getArray()) : {\n                        geometry: new google.maps.Data.LineString(overlay.getPath().getArray())\n                    };\n                case google.maps.drawing.OverlayType.CIRCLE:\n                    return geometryOnly ? new google.maps.Data.Point(overlay.getCenter()) : {\n                        properties: {\n                            radius: overlay.getRadius()\n                        },\n                        geometry: new google.maps.Data.Point(overlay.getCenter())\n                    };\n            }\n        },\n\n        transformToMVCArray: function (a) {\n            let clone = new google.maps.MVCArray();\n\n            function transform($a, parent) {\n                if ($a.length == 2 && (!Array.isArray($a[0]) && !Array.isArray($a[1])))\n                    parent.push(new google.maps.LatLng($a[1], $a[0]));\n                for (let a = 0; a < $a.length; a++) {\n                    if (!Array.isArray($a[a])) continue;\n                    transform($a[a], (parent) ? ($a[a].length == 2 && (!Array.isArray($a[a][0]) && !Array.isArray($a[a][1]))) ? parent : parent.getAt(parent.push(new google.maps.MVCArray()) - 1) : clone.getAt(clone.push(new google.maps.MVCArray()) - 1));\n                }\n            }\n\n            function isMVCArray(array) {\n                return array instanceof google.maps.MVCArray;\n            }\n\n            transform(a);\n\n            return clone;\n        },\n\n        loadFeaturesCollection: function (geoJSON) {\n            if (Array.isArray(geoJSON.features) && geoJSON.features.length > 0) {\n                let bounds = new google.maps.LatLngBounds();\n                for (let f = 0; f < geoJSON.features.length; f++) {\n                    let overlay = this.instanceOverlay(geoJSON.features[f]);\n                    overlay.feature = this.instanceFeature(overlay);\n                    this.addOverlayEvents(overlay);\n                    overlay.feature.getGeometry().forEachLatLng(function (latlng) {\n                        bounds.extend(latlng);\n                    });\n                    // overlay.feature.setProperty(\"color\", features[f].properties.color);\n                    overlay.setMap(this.map);\n                    this.overlays.push(overlay);\n                }\n                this.map.fitBounds(bounds);\n            }\n        },\n\n        addOverlayEvents: function (overlay) {\n            switch (overlay.type) {\n                case google.maps.drawing.OverlayType.POLYLINE:\n                    google.maps.event.addListener(overlay.getPath(), 'set_at', () => {\n                        if (!overlay.drag) {\n                            overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\n                            this.drawingModified();\n                        }\n                    });\n                    google.maps.event.addListener(overlay.getPath(), 'insert_at', () => {\n                        overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\n                        this.drawingModified();\n                    });\n                    google.maps.event.addListener(overlay.getPath(), 'remove_at', () => {\n                        overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\n                        this.drawingModified();\n                    });\n                    break;\n                case google.maps.drawing.OverlayType.POLYGON:\n                    const paths = overlay.getPaths();\n                    for (let p = 0; p < paths.getLength(); p++)\n                        for (let sp = 0; sp < paths.getAt(p).getLength(); sp++) {\n                            google.maps.event.addListener(paths.getAt(p), 'set_at', () => {\n                                if (!overlay.drag) {\n                                    overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\n                                    this.drawingModified();\n                                }\n                            });\n                            google.maps.event.addListener(paths.getAt(p), 'insert_at', () => {\n                                overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\n                                this.drawingModified();\n                            });\n                            google.maps.event.addListener(paths.getAt(p), 'remove_at', () => {\n                                overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\n                                this.drawingModified();\n                            });\n                        }\n                    break;\n                case google.maps.drawing.OverlayType.RECTANGLE:\n                    google.maps.event.addListener(overlay, 'bounds_changed', () => {\n                        if (!overlay.drag) {\n                            overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\n                            this.drawingModified();\n                        }\n                    });\n                    break;\n                case google.maps.drawing.OverlayType.CIRCLE:\n                    google.maps.event.addListener(overlay, 'radius_changed', () => {\n                        overlay.feature.setProperty('radius', this.calculateGeometry(overlay).properties.radius);\n                        this.drawingModified();\n                    });\n                    break;\n            }\n            if (overlay.type !== google.maps.drawing.OverlayType.MARKER) {\n                let self = this;\n                google.maps.event.addListener(overlay, 'click', function (event) {\n                    self.setSelection(this);\n                });\n            }\n            google.maps.event.addListener(overlay, 'dragstart', () => {\n                overlay.drag = true;\n            });\n            google.maps.event.addListener(overlay, 'mouseup', () => {\n                if (overlay.drag) {\n                    overlay.drag = false;\n                    overlay.feature.setGeometry(this.calculateGeometry(overlay, true));\n                    this.drawingModified();\n                }\n            });\n        },\n\n        drawingModified: function () {\n            if (this.config.drawingField) {\n                this.dataLayer.toGeoJson((obj) => {\n                    $wire.set(this.config.drawingField, JSON.stringify(obj));\n                });\n            }\n        },\n\n        guid: function () {\n            function s4() {\n                return Math.floor((1 + Math.random()) * 0x10000)\n                    .toString(16)\n                    .substring(1);\n            }\n\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n                s4() + '-' + s4() + s4() + s4();\n        },\n\n        setSelection: function (shape) {\n            this.clearSelection();\n            this.selectedShape = shape;\n            // shape.setEditable(true);\n            // selectColor(shape.get('fillColor') || shape.get('strokeColor'));\n            this.overlays.forEach(function (item) {\n                if (shape && item.id == shape.id) {\n                    if (item.getEditable()) {\n                        shape.setOptions({\n                            strokeColor: '#00ff00',\n                            strokeOpacity: '0.5'\n                        });\n                    } else {\n                        shape.setOptions({\n                            strokeColor: '#ff0000',\n                            strokeOpacity: '0.8'\n                        });\n                    }\n                    item.setEditable(!item.getEditable());\n                } else {\n                    item.setEditable(false);\n                }\n            });\n        },\n\n        clearSelection: function () {\n            this.selectedShape = null;\n\n            this.overlays.forEach(function (item) {\n                item.setEditable(false);\n                item.setOptions({\n                    // strokeColor: '#f06eaa'\n                    strokeColor: '#00ff00',\n                    strokeOpacity: '0.5'\n                });\n            });\n        },\n        \n        geoJsonContains: function (latLng) {\n            if (this.config.geoJson && this.config.geoJsonField) {\n                let features = [];\n                let dataLayer = new google.maps.Data()\n                this.geoJsonDataLayer.forEach((feature) => {\n                    if (feature.getGeometry().getType() === 'Polygon') {\n                        var poly = new google.maps.Polygon({\n                            path: feature.getGeometry().getAt(0).getArray()\n                        });\n                        if (google.maps.geometry.poly.containsLocation(latLng, poly)) {\n                            if (this.config.geoJsonProperty) {\n                                features.push(feature.getProperty(this.config.geoJsonProperty))\n                            } else {\n                                dataLayer.add(feature);\n                            }\n                        }\n                    }\n                });\n\n                let fieldContent;\n                if (this.config.geoJsonProperty) {\n                    fieldContent = JSON.stringify(features)\n                    $wire.set(this.config.geoJsonField, fieldContent);\n                } else {\n                    dataLayer.toGeoJson((gj) => {\n                        fieldContent = JSON.stringify(gj);\n                        $wire.set(this.config.geoJsonField, fieldContent);\n                    });\n                }\n            }\n        }\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t471: 0,\n\t822: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkfilament_google_maps\"] = self[\"webpackChunkfilament_google_maps\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\n__webpack_require__.O(undefined, [822], () => (__webpack_require__(825)))\nvar __webpack_exports__ = __webpack_require__.O(undefined, [822], () => (__webpack_require__(3)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","window","filamentGoogleMaps","$wire","config","map","geocoder","marker","markerLocation","layers","mapEl","pacEl","debug","autocomplete","autocompleteReverse","geolocate","geolocateLabel","draggable","clickable","defaultLocation","lat","lng","statePath","controls","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","searchBoxControl","zoomControl","drawingModeL","drawingControl","drawingControlPosition","drawingModes","circle","rectangle","polygon","polyline","drawingField","geoJson","geoJsonField","geoJsonProperty","geoJsonVisible","reverseGeocodeFields","defaultZoom","gmaps","symbols","drawingManager","overlays","dataLayer","geoJsonDataLayer","polyOptions","strokeColor","strokeOpacity","strokeWeight","fillOpacity","editable","selectedShape","loadGMaps","document","getElementById","waitForGlobal","key","callback","setTimeout","this","createMap","bind","script","createElement","id","filamentGoogleMapsAsyncLoad","src","head","appendChild","init","filamentGoogleMapsAPILoaded","Object","keys","length","google","maps","Geocoder","Map","center","getCoordinates","zoom","Marker","setPosition","addListener","event","markerMoved","input","searchBox","places","SearchBox","ControlPosition","TOP_LEFT","push","value","getPlaces","geometry","location","geoComplete","addEventListener","e","code","target","nodeName","type","preventDefault","Autocomplete","fields","strictBounds","types","place","getPlace","viewport","fitBounds","setCenter","set","formatted_address","setCoordinates","updateGeocode","alert","name","layerUrl","KmlLayer","url","kmlEvent","featureData","description","data","Data","test","loadGeoJson","addGeoJson","JSON","parse","navigator","locationButton","textContent","classList","add","TOP_CENTER","geolocation","getCurrentPosition","position","coords","latitude","longitude","updateAutocomplete","panTo","setStyle","cursor","visible","drawing","DrawingManager","drawingMode","drawingControlOptions","OverlayType","MARKER","CIRCLE","POLYGON","POLYLINE","RECTANGLE","markerOptions","polylineOptions","rectangleOptions","circleOptions","polygonOptions","setMap","clearSelection","geoJSON","get","loadFeaturesCollection","overlay","guid","feature","instanceFeature","addOverlayEvents","setDrawingMode","setSelection","drawingModified","geoJsonContains","latLng","toJSON","updateMapFromAlpine","getPosition","updateMap","geocode","then","response","results","replacements","getReplacements","address_components","field","replaced","replacement","split","join","symbol","trim","error","console","log","message","hasOwnProperty","forEach","component","indexOf","toLowerCase","short_name","long_name","instanceOverlay","instance","properties","LatLng","coordinates","NE","SW","Rectangle","assign","bounds","LatLngBounds","Polygon","paths","transformToMVCArray","Polyline","path","getAt","Circle","radius","calculatedOverlay","calculateGeometry","Feature","geometryOnly","Point","b","getBounds","p","getSouthWest","getNorthEast","getPath","getArray","LineString","getCenter","getRadius","a","clone","MVCArray","transform","$a","parent","Array","isArray","features","f","getGeometry","forEachLatLng","latlng","extend","drag","setGeometry","getPaths","getLength","sp","setProperty","self","toGeoJson","obj","stringify","s4","Math","floor","random","toString","substring","shape","item","getEditable","setOptions","setEditable","fieldContent","getType","poly","containsLocation","getProperty","gj","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","r","o","prop","prototype","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}