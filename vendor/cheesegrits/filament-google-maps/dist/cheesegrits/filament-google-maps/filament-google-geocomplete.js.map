{"version":3,"file":"/cheesegrits/filament-google-maps/filament-google-geocomplete.js","mappings":"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","sources":["webpack://filament-google-maps/./resources/js/filament-google-geocomplete.js"],"sourcesContent":["window.filamentGoogleGeocomplete = ($wire, config) => {\n    return {\n        geocoder: null,\n        mapEl: null,\n        config: {\n            debug: false,\n            statePath: '',\n            gmaps: '',\n            filterName: null,\n            reverseGeocodeFields: {},\n            latLngFields: {},\n            types: [],\n            countries: [],\n            isLocation: false,\n            placeField: 'formatted_address',\n        },\n        symbols: {\n            '%n': [\"street_number\"],\n            '%z': [\"postal_code\"],\n            '%S': [\"street_address\", \"route\"],\n            '%A1': [\"administrative_area_level_1\"],\n            '%A2': [\"administrative_area_level_2\"],\n            '%A3': [\"administrative_area_level_3\"],\n            '%A4': [\"administrative_area_level_4\"],\n            '%A5': [\"administrative_area_level_5\"],\n            '%a1': [\"administrative_area_level_1\"],\n            '%a2': [\"administrative_area_level_2\"],\n            '%a3': [\"administrative_area_level_3\"],\n            '%a4': [\"administrative_area_level_4\"],\n            '%a5': [\"administrative_area_level_5\"],\n            '%L': [\"locality\"],\n            '%D': [\"sublocality\"],\n            '%C': [\"country\"],\n            '%c': [\"country\"],\n        },\n\n        loadGMaps: function () {\n            if (!document.getElementById('filament-google-maps-google-maps-js')) {\n                const script = document.createElement('script');\n                script.id = 'filament-google-maps-google-maps-js';\n                window.filamentGoogleMapsAsyncLoad = this.createAutocomplete.bind(this);\n                script.src = this.config.gmaps + '&callback=filamentGoogleMapsAsyncLoad';\n                document.head.appendChild(script);\n            } else {\n                const waitForGlobal = function (key, callback) {\n                    if (window[key]) {\n                        callback();\n                    } else {\n                        setTimeout(function () {\n                            waitForGlobal(key, callback);\n                        }, 100);\n                    }\n                };\n\n                waitForGlobal(\"filamentGoogleMapsAPILoaded\", function () {\n                    this.createAutocomplete();\n                }.bind(this));\n            }\n        },\n\n        init: function (mapEl) {\n            this.mapEl = mapEl;\n            this.config = {...this.config, ...config};\n            this.loadGMaps();\n        },\n\n        createAutocomplete: function () {\n            window.filamentGoogleMapsAPILoaded = true;\n\n            let fields = [\"address_components\", \"formatted_address\", \"geometry\", \"name\"];\n\n            if (!fields.includes(this.config.placeField)) {\n                fields.push(this.config.placeField);\n            }\n\n            const geocompleteOptions = {\n                fields: fields,\n                strictBounds: false,\n                types: this.config.types,\n            };\n\n            const geocompleteEl = this.config.isLocation ? this.config.statePath + '-fgm-address' : this.config.statePath;\n            const geoComplete = document.getElementById(geocompleteEl);\n\n            if (geoComplete) {\n                window.addEventListener('keydown', function (e) {\n                    if (e.key === 'U+000A' || e.key === 'Enter' || e.code === 'Enter') {\n                        if (e.target.nodeName === 'INPUT' && e.target.type === 'text') {\n                            e.preventDefault();\n                            return false;\n                        }\n                    }\n                }, true);\n\n                const autocomplete = new google.maps.places.Autocomplete(geoComplete, geocompleteOptions);\n\n                autocomplete.setComponentRestrictions({\n                    country: this.config.countries,\n                })\n\n                autocomplete.addListener(\"place_changed\", () => {\n                    const place = autocomplete.getPlace();\n\n                    if (!place.geometry || !place.geometry.location) {\n                        window.alert(\"No details available for input: '\" + place.name + \"'\");\n                        return;\n                    }\n\n                    this.setLocation(place);\n                    this.updateReverseGeocode(place);\n                    this.updateLatLng(place);\n                });\n\n                const geoLocate = document.getElementById(this.config.statePath + '-geolocate');\n\n                if (geoLocate)  {\n                    this.geocoder = new google.maps.Geocoder();\n\n                    geoLocate.addEventListener('click',  (event) => {\n                        if (\"geolocation\" in navigator){\n                            navigator.geolocation.getCurrentPosition((position) => {\n                                var currentLatitude = position.coords.latitude;\n                                var currentLongitude = position.coords.longitude;\n                                var currentLocation = { lat: currentLatitude, lng: currentLongitude };\n\n                                this.geocoder\n                                    .geocode({location: currentLocation})\n                                    .then((response) => {\n                                        if (response.results[0]) {\n                                            geoComplete.setAttribute('value', response.results[0].formatted_address)\n                                            this.setLocation(response.results[0]);\n                                            this.updateReverseGeocode(response.results[0]);\n                                            this.updateLatLng(response.results[0]);\n                                        }\n                                    });\n                            });\n                        }\n                    })\n                }\n            }\n        },\n        setLocation: function (place) {\n            if (this.config.isLocation) {\n                $wire.set(this.config.statePath, place.geometry.location);\n            } else {\n                $wire.set(this.config.statePath, place[this.config.placeField]);\n            }\n\n            if (this.config.filterName) {\n                const latPath = this.config.filterName + '.latitude';\n                const lngPath = this.config.filterName + '.longitude';\n                const lat = document.getElementById(latPath);\n                const lng = document.getElementById(lngPath);\n\n                if (lat && lng) {\n                    lat.setAttribute('value', place.geometry.location.lat().toString());\n                    lng.setAttribute('value', place.geometry.location.lng().toString());\n                    $wire.set(latPath, place.geometry.location.lat().toString());\n                    $wire.set(lngPath, place.geometry.location.lng().toString());\n\n                }\n            }\n        },\n        updateReverseGeocode: function (place) {\n            if (Object.keys(this.config.reverseGeocodeFields).length > 0) {\n                if (place.address_components) {\n                    //$wire.set(config.autocomplete, response.results[0].formatted_address);\n                    const replacements = this.getReplacements(place.address_components);\n\n                    for (const field in this.config.reverseGeocodeFields) {\n                        let replaced = this.config.reverseGeocodeFields[field];\n\n                        for (const replacement in replacements) {\n                            replaced = replaced.split(replacement).join(replacements[replacement]);\n                        }\n\n                        for (const symbol in this.symbols) {\n                            replaced = replaced.split(symbol).join('');\n                        }\n\n                        replaced = replaced.trim();\n                        $wire.set(field, replaced)\n                    }\n\n                }\n            }\n        },\n        updateLatLng: function(place) {\n            if (Object.keys(this.config.latLngFields).length > 0) {\n                if (place.geometry) {\n                    $wire.set(this.config.latLngFields.lat, place.geometry.location.lat().toString())\n                    $wire.set(this.config.latLngFields.lng, place.geometry.location.lng().toString())\n                }\n            }\n        },\n        getReplacements: function (address_components) {\n            let replacements = {};\n\n            address_components.forEach(component => {\n                for (const symbol in this.symbols) {\n                    if (this.symbols[symbol].indexOf(component.types[0]) !== -1) {\n                        if (symbol === symbol.toLowerCase()) {\n                            replacements[symbol] = component.short_name;\n                        } else {\n                            replacements[symbol] = component.long_name;\n                        }\n                    }\n                }\n            });\n\n            if (this.config.debug) {\n                console.log(replacements);\n            }\n\n            return replacements;\n        }\n\n    }\n}\n"],"names":["window","filamentGoogleGeocomplete","$wire","config","geocoder","mapEl","debug","statePath","gmaps","filterName","reverseGeocodeFields","latLngFields","types","countries","isLocation","placeField","symbols","loadGMaps","document","getElementById","waitForGlobal","key","callback","setTimeout","this","createAutocomplete","bind","script","createElement","id","filamentGoogleMapsAsyncLoad","src","head","appendChild","init","filamentGoogleMapsAPILoaded","fields","includes","push","geocompleteOptions","strictBounds","geocompleteEl","geoComplete","addEventListener","e","code","target","nodeName","type","preventDefault","autocomplete","google","maps","places","Autocomplete","setComponentRestrictions","country","addListener","place","getPlace","geometry","location","setLocation","updateReverseGeocode","updateLatLng","alert","name","geoLocate","Geocoder","event","navigator","geolocation","getCurrentPosition","position","currentLocation","lat","coords","latitude","lng","longitude","geocode","then","response","results","setAttribute","formatted_address","set","latPath","lngPath","toString","Object","keys","length","address_components","replacements","getReplacements","field","replaced","replacement","split","join","symbol","trim","forEach","component","indexOf","toLowerCase","short_name","long_name","console","log"],"sourceRoot":""}